----------------------------------------------------------------------
----------------Header describe    需要的头文件描述--------------------
----------------------------------------------------------------------
AprilTags基于opencv库进行图像处理，所以在Ros中使用时，一般也需要一下图像相关库
#include <sensor_msgs/image_encodings.h>   //ROS MSG到图像的编码库      
#include <cv_bridge/cv_bridge.h>           //用于CV和ROS的转换

#include <geometry_msgs/PoseStamped.h>     //用于AprilTags标签的位置信息
#include <geometry_msgs/PoseArray.h>       //用于Apriltags标签的位置信息

#include <apriltags_ros/AprilTagDetection.h>        //这个是ROS自定义消息自动生成的MSG头文件（在包中Generate和添加这个消息描述）
#include <apriltags_ros/AprilTagDetectionArray.h>   //同上

#include <AprilTags/Tag16h5.h>       //Apriltags的五个识别库文件
#include <AprilTags/Tag25h7.h>
#include <AprilTags/Tag25h9.h>
#include <AprilTags/Tag36h9.h>
#include <AprilTags/Tag36h11.h>

#include <XmlRpcException.h>         //用于存放初始化apriltags参数信息的头文件
----------------------------------------------------------------------
-----------------------Step and API   流程和接口----------------------
----------------------------------------------------------------------
1    载入库描述（重要）  其中 ros::NodeHandle nh; ros::NodeHandle pnh("~");


	  XmlRpc::XmlRpcValue april_tag_descriptions;
	  if(!pnh.getParam("tag_descriptions", april_tag_descriptions)){
	    ROS_WARN("No april tags specified");
	  }
 	 else{
 	   try{
 	     descriptions_ = parse_tag_descriptions(april_tag_descriptions);
 	   } catch(XmlRpc::XmlRpcException e){
  	    ROS_ERROR_STREAM("Error loading tag descriptions: "<<e.getMessage());
  	  }
 	 }

 	 if(!pnh.getParam("sensor_frame_id", sensor_frame_id_)){	//初始化sensor_frame_id_（是个字符串）,作为后续图像头的frame_id，经过测试，为摄像头名"camera"，估计是驱动产生的
 	   sensor_frame_id_ = "";
 	 }


	其中：	xml参数载入过程函数如下：
		std::map<int, AprilTagDescription> AprilTagDetector::parse_tag_descriptions(XmlRpc::XmlRpcValue& tag_descriptions){
		  std::map<int, AprilTagDescription> descriptions;
		  ROS_ASSERT(tag_descriptions.getType() == XmlRpc::XmlRpcValue::TypeArray);
		  for (int32_t i = 0; i < tag_descriptions.size(); ++i) {
		    XmlRpc::XmlRpcValue& tag_description = tag_descriptions[i];
		    ROS_ASSERT(tag_description.getType() == XmlRpc::XmlRpcValue::TypeStruct);
		    ROS_ASSERT(tag_description["id"].getType() == XmlRpc::XmlRpcValue::TypeInt);
		    ROS_ASSERT(tag_description["size"].getType() == XmlRpc::XmlRpcValue::TypeDouble);
		
		    int id = (int)tag_description["id"];
			    double size = (double)tag_description["size"];

		    std::string frame_name;
		    if(tag_description.hasMember("frame_id")){
		      ROS_ASSERT(tag_description["frame_id"].getType() == XmlRpc::XmlRpcValue::TypeString);
		      frame_name = (std::string)tag_description["frame_id"];
		    }
		    else{
		      std::stringstream frame_name_stream;
		      frame_name_stream << "tag_" << id;
		      frame_name = frame_name_stream.str();
		    }
		    AprilTagDescription description(id, size, frame_name);
		    ROS_INFO_STREAM("Loaded tag config: "<<id<<", size: "<<size<<", frame_name: "<<frame_name);
		    descriptions.insert(std::make_pair(id, description));
		  }
		  return descriptions;
		}

2	初始化的变量：
	boost::shared_ptr<AprilTags::TagDetector> tag_detector_;
	用法：
	AprilTags::TagCodes tag_codes = AprilTags::tagCodes36h11;                //初始化识别一种类别标签的库
	tag_detector_= boost::shared_ptr<AprilTags::TagDetector>(new AprilTags::TagDetector(tag_codes));//初始化对应库的标靶检测机

3	ROS中设定的订阅和发布：
	 	  image_transport::ImageTransport it_;  //图像主题相关
	订阅：摄像头Image和摄像头INFO    image_transport::CameraSubscriber image_sub_;
		  image_sub_ = it_.subscribeCamera("image_rect", 1, &AprilTagDetector::imageCb, this);
	发布：识别到的标签信息  ros::Publisher detections_pub_;     ros::Publisher pose_pub_;   image_transport::Publisher image_pub_;
		  image_pub_ = it_.advertise("tag_detections_image", 1);
		  detections_pub_ = nh.advertise<AprilTagDetectionArray>("tag_detections", 1);
  		  pose_pub_ = nh.advertise<geometry_msgs::PoseArray>("tag_detections_pose", 1);

4	回调函数的处理部分：void AprilTagDetector::imageCb(const sensor_msgs::ImageConstPtr& msg,const sensor_msgs::CameraInfoConstPtr& cam_info)
	(a)图像转化：从回调参数消息中取出图像，利用cvbridge将msg格式的消息转为Opencv的图像格式
		cv_bridge::CvImagePtr cv_ptr;
		  try{
 		   cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
 		 }
 		 catch (cv_bridge::Exception& e){
 		   ROS_ERROR("cv_bridge exception: %s", e.what());
 		   return;
 		 }
 		 cv::Mat gray;		
 		 cv::cvtColor(cv_ptr->image, gray, CV_BGR2GRAY);    //转成灰度图（并强制使用cv::Mat格式）
	(b)将灰度图像传给aptiltags的检测机接口
		std::vector<AprilTags::TagDetection>	detections = tag_detector_->extractTags(gray);
	(c)从回调函数的摄像机参数中取出摄像机参数，用到的参数只有fx,fy,px,py四个参数，封装图像头frame_id
		  double fx = cam_info->K[0];
		  double fy = cam_info->K[4];
		  double px = cam_info->K[2];
		  double py = cam_info->K[5];
		  if(!sensor_frame_id_.empty()) cv_ptr->header.frame_id = sensor_frame_id_;
	(e)处理从b中得的识别标签结果：
		  AprilTagDetectionArray tag_detection_array;//定义用到变量
		  geometry_msgs::PoseArray tag_pose_array;
		  tag_pose_array.header = cv_ptr->header;
		//接下来，对b检测的标签进行遍历处理，技巧：运用了C++ 中#include <boost/foreach.hpp>  的BOOST_FOREACH(val,vals)来遍历容器内容
		   BOOST_FOREACH(AprilTags::TagDetection detection, detections){
		   std::map<int, AprilTagDescription>::const_iterator description_itr = descriptions_.find(detection.id);
 		   if(description_itr == descriptions_.end()){
	  	   ROS_WARN_THROTTLE(10.0, "Found tag: %d, but no description was found for it", detection.id);
   		   continue;
  		   }
  		  AprilTagDescription description = description_itr->second;
  		  double tag_size = description.size();
		  detection.draw(cv_ptr->image);
 		  Eigen::Matrix4d transform = detection.getRelativeTransform(tag_size, fx, fy, px, py);
  		  Eigen::Matrix3d rot = transform.block(0,0,3,3);
  		  Eigen::Quaternion<double> rot_quaternion = Eigen::Quaternion<double>(rot);
		  //利用getRelativeTransform获得转换矩阵，由下公式获得位置和四元素
  		  geometry_msgs::PoseStamped tag_pose;
  		  tag_pose.pose.position.x = transform(0,3);
  		  tag_pose.pose.position.y = transform(1,3);
  		  tag_pose.pose.position.z = transform(2,3);
  		  tag_pose.pose.orientation.x = rot_quaternion.x();
  		  tag_pose.pose.orientation.y = rot_quaternion.y();
  		  tag_pose.pose.orientation.z = rot_quaternion.z();
  		  tag_pose.pose.orientation.w = rot_quaternion.w();
  		  tag_pose.header = cv_ptr->header;
		  //封装检测到的tag到tag_arrary，然后将数组结果作为消息发布出去。
   		  AprilTagDetection tag_detection;
   		  tag_detection.pose = tag_pose;
  		  tag_detection.id = detection.id;
  		  tag_detection.size = tag_size;
  		  tag_detection_array.detections.push_back(tag_detection);
  		  tag_pose_array.poses.push_back(tag_pose.pose);
	   	  //封装到TF消息，变换到对应坐标系，进行TF广播
  		   tf::Stamped<tf::Transform> tag_transform;
 		   tf::poseStampedMsgToTF(tag_pose, tag_transform);
 		   tf_pub_.sendTransform(tf::StampedTransform(tag_transform, tag_transform.stamp_, tag_transform.frame_id_, description.frame_name()));
 		   }
		  //处理完成，发布识别结果
 		   detections_pub_.publish(tag_detection_array);
 		   pose_pub_.publish(tag_pose_array);
  		   image_pub_.publish(cv_ptr->toImageMsg());

